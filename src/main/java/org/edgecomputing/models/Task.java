package org.edgecomputing.models;

/**
 * Represents a computational task generated by an IoT device.
 * This class models tasks that can be executed locally on IoT devices
 * or offloaded to edge nodes.
 */
public class Task {
    private final String taskId;
    private final String type;
    private final long mipsRequired;
    private final long inputSize;
    private final long outputSize;
    private final double deadlineSeconds;
    private final int sourceDeviceId;
    
    private String executedOn;
    private double creationTime;
    private double startTime;
    private double completionTime;
    private String status;
    private double energyConsumed;
    
    /**
     * Creates a new Task instance.
     *
     * @param taskId Unique identifier for this task
     * @param type Type of task (lightweight, medium, intensive)
     * @param mipsRequired Processing requirements in MIPS
     * @param inputSize Input data size in bytes
     * @param outputSize Output data size in bytes
     * @param deadlineSeconds Maximum time to complete the task
     * @param sourceDeviceId ID of the device that generated this task
     * @param creationTime Simulation time when the task was created
     */
    public Task(String taskId, String type, long mipsRequired, long inputSize, 
                long outputSize, double deadlineSeconds, int sourceDeviceId, 
                double creationTime) {
        this.taskId = taskId;
        this.type = type;
        this.mipsRequired = mipsRequired;
        this.inputSize = inputSize;
        this.outputSize = outputSize;
        this.deadlineSeconds = deadlineSeconds;
        this.sourceDeviceId = sourceDeviceId;
        this.creationTime = creationTime;
        this.status = "created";
    }

    /**
     * @return the taskId
     */
    public String getTaskId() {
        return taskId;
    }

    /**
     * @return the task type
     */
    public String getType() {
        return type;
    }

    /**
     * @return the mipsRequired
     */
    public long getMipsRequired() {
        return mipsRequired;
    }

    /**
     * @return the inputSize in bytes
     */
    public long getInputSize() {
        return inputSize;
    }

    /**
     * @return the outputSize in bytes
     */
    public long getOutputSize() {
        return outputSize;
    }

    /**
     * @return the deadline in seconds
     */
    public double getDeadlineSeconds() {
        return deadlineSeconds;
    }

    /**
     * @return the sourceDeviceId
     */
    public int getSourceDeviceId() {
        return sourceDeviceId;
    }

    /**
     * @return where the task was executed (device or edge node id)
     */
    public String getExecutedOn() {
        return executedOn;
    }

    /**
     * @param executedOn the location to set
     */
    public void setExecutedOn(String executedOn) {
        this.executedOn = executedOn;
    }

    /**
     * @return the creationTime
     */
    public double getCreationTime() {
        return creationTime;
    }

    /**
     * @return the startTime
     */
    public double getStartTime() {
        return startTime;
    }

    /**
     * @param startTime the startTime to set
     */
    public void setStartTime(double startTime) {
        this.startTime = startTime;
        this.status = "processing";
    }

    /**
     * @return the completionTime
     */
    public double getCompletionTime() {
        return completionTime;
    }

    /**
     * @param completionTime the completionTime to set
     */
    public void setCompletionTime(double completionTime) {
        this.completionTime = completionTime;
        this.status = "completed";
    }

    /**
     * @return the status of the task
     */
    public String getStatus() {
        return status;
    }

    /**
     * @param status the status to set
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * @return the energyConsumed
     */
    public double getEnergyConsumed() {
        return energyConsumed;
    }

    /**
     * @param energyConsumed the energyConsumed to set
     */
    public void setEnergyConsumed(double energyConsumed) {
        this.energyConsumed = energyConsumed;
    }
    
    /**
     * Calculate the time taken to execute this task
     * 
     * @return time in seconds, or -1 if not completed
     */
    public double getExecutionTime() {
        if (completionTime > 0 && startTime > 0) {
            return completionTime - startTime;
        }
        return -1;
    }
    
    /**
     * Calculate the total response time for this task
     * 
     * @return time in seconds, or -1 if not completed
     */
    public double getResponseTime() {
        if (completionTime > 0) {
            return completionTime - creationTime;
        }
        return -1;
    }
    
    /**
     * Check if the task met its deadline
     * 
     * @return true if the task was completed within the deadline
     */
    public boolean metDeadline() {
        return getResponseTime() >= 0 && getResponseTime() <= deadlineSeconds;
    }
    
    @Override
    public String toString() {
        return "Task [id=" + taskId + ", type=" + type + ", status=" + status + 
               ", source=" + sourceDeviceId + ", executedOn=" + executedOn + "]";
    }
}
